{"version":3,"sources":["services/conversation.js","components/ConversationList/ConversationListItem.js","components/Spinner.js","components/ConversationList/ConversationList.js","components/Menu/NewConversationForm.js","components/ConversationView/CommentInput.js","components/ConversationView/SingleMessage.js","components/ConversationView/MessageList.js","utils/useWindowDimensions.js","components/ConversationView/ConversationView.js","components/Menu/Menu.js","App.js","index.js"],"names":["axios","require","baseUrl","a","async","get","response","data","conversation","post","ConversationItem","id","className","to","src","image","alt","title","description","SpinnerToExport","Spinner","animation","role","ConversationList","useState","conversations","setConversations","setPopularConversations","useEffect","conversationService","fetched","Array","from","sort","conversationA","conversationB","messages","length","slice","fetchData","style","width","textAlign","margin","map","key","NewConversationForm","show","setShow","error","setError","setTitle","loading","setLoading","imagePreview","setImagePreview","setImage","setDescription","history","useHistory","postConversation","e","preventDefault","savedConversation","push","handleClose","goBack","acceptFile","file","fileUrl","console","log","rejectFile","reason","verifyImage","url","callback","img","Image","onload","size","onerror","Modal","onHide","Header","closeButton","Title","Body","Alert","Form","onSubmit","Group","Label","htmlFor","Control","type","name","onChange","target","value","accept","event","files","reader","FileReader","onloadend","result","accepted","readAsDataURL","Text","maxHeight","Footer","Button","variant","onClick","CommentInput","goToLast","propsId","socket","sender","setSender","comment","setComment","verifyComment","acceptComment","emit","text","date","Date","now","rejectComment","background","position","bottom","Card","padding","left","right","sendComment","Row","as","Col","sm","marginLeft","marginRight","InputGroup","Prepend","placeholder","required","SingleMessage","message","year","getFullYear","month","getMonth","day","getDate","hour","getHours","minutes","getMinutes","toString","Toast","marginTop","MessageList","index","getWindowDimensions","window","innerWidth","height","innerHeight","ConversationView","props","setConversation","useImmer","setMessages","match","params","setSocket","windowDimensions","setWindowDimensions","handleResize","addEventListener","removeEventListener","useWindowDimensions","useRef","top","openedSocket","openSocket","connect","on","newConversation","draft","msg","newComment","disconnect","scrollToRef","ref","scrollTo","current","offsetTop","visibility","float","clear","Menu","Navbar","collapseOnSelect","bg","expand","Brand","Link","href","Toggle","aria-controls","Collapse","Nav","data-testid","App","exact","path","component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ef3f8fe0.chunk.js","sourcesContent":["const axios = require('axios')\r\nconst baseUrl = \"/api/conversations\"\r\nconst getAll = async () => {\r\n    const response = await axios.get(baseUrl)\r\n    return response.data\r\n}\r\n\r\nconst add = async (conversation) => {\r\n    const response = await axios.post(baseUrl, conversation)\r\n    return response.data\r\n}\r\n\r\nconst getOne = async (id) => {\r\n    const response = await axios.get(baseUrl + \"/\" + id)\r\n    return response.data\r\n}\r\n\r\nexport default { getAll, add, getOne }","import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport './ConversationListItem.css';\r\n\r\nconst ConversationItem = ({ conversation }) => {\r\n    return (\r\n        <>\r\n            <div id=\"all\">\r\n                <div className=\"view view-first\">\r\n                    <Link to={\"/conversations/\" + conversation.id}>\r\n                        <img src={conversation.image} alt=\"Conversation image\" />\r\n                        <div className=\"mask\">\r\n                            <h2>{conversation.title}</h2>\r\n                            <p>{conversation.description}</p>\r\n                            <p className=\"info\">Join</p>\r\n                        </div>\r\n                    </Link>\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ConversationItem\r\n","import Spinner from 'react-bootstrap/Spinner'\r\nimport React from 'react'\r\n\r\nconst SpinnerToExport = () => {\r\n    return (\r\n        <Spinner animation=\"border\" role=\"status\">\r\n            <span className=\"sr-only\">Loading...</span>\r\n        </Spinner>\r\n    )\r\n}\r\n\r\nexport default SpinnerToExport","import React, { useState, useEffect } from 'react'\r\nimport conversationService from '../../services/conversation'\r\nimport ConversationListItem from './ConversationListItem'\r\nimport Spinner from '../Spinner'\r\n\r\nconst ConversationList = () => {\r\n    const [conversations, setConversations] = useState()\r\n    const [popularConversations, setPopularConversations] = useState([])\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            const fetched = await conversationService.getAll()\r\n            setConversations(fetched)\r\n            setPopularConversations(Array.from(fetched).sort((conversationA, conversationB) => conversationB.messages.length - conversationA.messages.length).slice(0, 10))\r\n        }\r\n        fetchData()\r\n    }, [])\r\n\r\n    return (\r\n        <>\r\n            <div className=\"container\">\r\n                <div className=\"row\" style={{ width: \"100%\", textAlign: \"center\" }} >\r\n                    <div className=\"col-sm\">\r\n                        <h2 style={{margin:\"30px\"}}>All Conversations</h2>\r\n                        {conversations ?\r\n                            <div>\r\n                                {conversations.map(conversation => <ConversationListItem key={conversation.id} conversation={conversation} />)}\r\n                            </div>\r\n                            :\r\n                            <Spinner />\r\n                        }\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\nexport default ConversationList","import React, { useState } from \"react\"\r\nimport Modal from \"react-bootstrap/Modal\"\r\nimport Button from \"react-bootstrap/Button\"\r\nimport Alert from \"react-bootstrap/Alert\"\r\nimport Form from \"react-bootstrap/Form\"\r\nimport conversationService from '../../services/conversation'\r\nimport { useHistory } from 'react-router-dom'\r\nimport Spinner from '../Spinner'\r\n\r\nconst NewConversationForm = () => {\r\n    const [show, setShow] = useState(true)\r\n    const [error, setError] = useState(\"\")\r\n    const [title, setTitle] = useState(\"\")\r\n    const [loading, setLoading] = useState(false)\r\n    const [imagePreview, setImagePreview] = useState()\r\n    const [image, setImage] = useState()\r\n    const [description, setDescription] = useState(\"\")\r\n    const history = useHistory()\r\n\r\n    const postConversation = async (e) => {\r\n        e.preventDefault();\r\n        setLoading(true)\r\n        if (title && description && image) {\r\n            const conversation = {}\r\n            conversation.title = title\r\n            conversation.description = description\r\n            conversation.image = imagePreview\r\n            const savedConversation = await conversationService.add(conversation)\r\n            history.push(\"/conversations/\" + savedConversation.id)\r\n        } else {\r\n            setLoading(false)\r\n            setError(\"The conversation needs a title, a description and an image.\")\r\n        }\r\n    }\r\n\r\n    const handleClose = () => {\r\n        setShow(false)\r\n        history.goBack()\r\n    }\r\n\r\n    const getUploadedFile = async (event) => {\r\n        setImagePreview()\r\n        const file = event.target.files[0]\r\n        const reader = new FileReader()\r\n        reader.onloadend = () => {\r\n            verifyImage(reader.result, file, (accepted, reason) => {\r\n                accepted\r\n                    ? acceptFile(file, reader.result)\r\n                    : rejectFile(reason)\r\n            })\r\n        }\r\n        reader.readAsDataURL(file)\r\n    }\r\n\r\n    const acceptFile = (file, fileUrl) => {\r\n        setImage(file)\r\n        console.log(\"Accepted File\", file)\r\n        setImagePreview(fileUrl)\r\n        setError()\r\n    }\r\n\r\n    const rejectFile = (reason) => {\r\n        setImage()\r\n        setImagePreview()\r\n        setError(reason)\r\n    }\r\n\r\n    const verifyImage = (url, file, callback) => {\r\n        let img = new Image();\r\n        img.onload = () => {\r\n            file.size < 5242880\r\n                ? callback(true, \"\")\r\n                : callback(false, \"File is too large.\")\r\n        }\r\n        img.onerror = () => callback(false, \"File is not an image.\")\r\n        img.src = url;\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Modal show={show} onHide={handleClose} animation={false}>\r\n                <Modal.Header closeButton>\r\n                    <Modal.Title>Create a new conversation</Modal.Title>\r\n                </Modal.Header>\r\n                {loading ?\r\n                    <><Spinner /></>\r\n                    :\r\n                    <>\r\n                        <Modal.Body>\r\n                            {error && <Alert className=\"alert alert-danger\">{error}</Alert>}\r\n                            <div className=\"postForm\">\r\n                                <Form onSubmit={postConversation}>\r\n                                    <Form.Group>\r\n                                        <Form.Label htmlFor=\"title\">Title for the Conversation: </Form.Label>\r\n                                        <Form.Control type=\"text\" name=\"title\" onChange={e => setTitle(e.target.value)} />\r\n                                    </Form.Group>\r\n                                    <Form.Group>\r\n                                        <Form.Label htmlFor=\"description\">Description of the Conversation: </Form.Label>\r\n                                        <Form.Control type=\"text\" name=\"title\" onChange={e => setDescription(e.target.value)} />\r\n                                    </Form.Group>\r\n                                    <Form.Group>\r\n                                        <Form.Label htmlFor=\"image\">Image for the Conversation: </Form.Label>\r\n                                        <Form.Control type=\"file\" name=\"image\" accept=\"image/*\" onChange={getUploadedFile} />\r\n                                        <Form.Text> Image size limit is 5mb </Form.Text>\r\n                                    </Form.Group>\r\n                                </Form>\r\n                            </div>\r\n                            {imagePreview && <div style={{ textAlign: \"center\" }}> Preview: <div><img src={imagePreview} style={{ maxHeight: \"300px\" }} alt=\"Preview goes here\" /></div></div>}\r\n                        </Modal.Body>\r\n                        <Modal.Footer>\r\n                            <Button variant=\"secondary\" onClick={handleClose}>\r\n                                Close\r\n                            </Button>\r\n                            <Button variant=\"primary\" onClick={postConversation}>\r\n                                Save Changes\r\n                            </Button>\r\n                        </Modal.Footer>\r\n                    </>\r\n                }\r\n            </Modal >\r\n        </>\r\n    )\r\n}\r\n\r\nexport default NewConversationForm","import React, {useState} from 'react'\r\nimport Col from \"react-bootstrap/Col\"\r\nimport Card from \"react-bootstrap/Card\"\r\nimport InputGroup from \"react-bootstrap/InputGroup\"\r\nimport Form from 'react-bootstrap/Form'\r\nimport Button from \"react-bootstrap/Button\"\r\n\r\nconst CommentInput = ({ setError, goToLast, propsId, socket }) => {\r\n    const [sender, setSender] = useState(\"\")\r\n    const [id] = useState(propsId)\r\n    const [comment, setComment] = useState(\"\")\r\n\r\n    const sendComment = (event) => {\r\n        event.preventDefault()\r\n        verifyComment()\r\n            ? acceptComment()\r\n            : rejectComment()\r\n    }\r\n    const verifyComment = () => {\r\n        return (sender && comment)\r\n    }\r\n    const acceptComment = () => {\r\n        socket.emit(\"POST_COMMENT\", id, { name: sender, text: comment, date: Date.now() })\r\n        setComment(\"\")\r\n        setError(\"\")\r\n        goToLast()\r\n    }\r\n\r\n    const rejectComment = () => {\r\n        setError(\"Comment can't be empty\")\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className=\"row\" >\r\n                <div className=\"col\" className=\"col\" style={{ background: \"white\", position: \"fixed\", bottom: 0, width: \"100%\" }} >\r\n                    <Card style={{ background: \"white\", padding:10, position: \"fixed\", bottom: 0, left: 0, right: 0, width: \"100%\" }} >\r\n                        <Form onSubmit={(event) => sendComment(event)} className='comment-form'>\r\n                            <Form.Row >\r\n                                <Form.Group as={Col} sm=\"3\" style={{ marginLeft: \"auto\", marginRight: \"auto\" }} >\r\n                                    <Form.Label>Your Name</Form.Label>\r\n                                    <InputGroup >\r\n                                        <InputGroup.Prepend>\r\n                                            <InputGroup.Text>@</InputGroup.Text>\r\n                                        </InputGroup.Prepend>\r\n                                        <Form.Control\r\n                                            type=\"text\"\r\n                                            placeholder=\"Username\"\r\n                                            value={sender}\r\n                                            onChange={(event) => setSender(event.target.value)}\r\n                                            required />\r\n                                    </InputGroup>\r\n                                </Form.Group>\r\n                                <Form.Group as={Col} sm=\"8\" style={{ marginLeft: \"auto\", marginRight: \"auto\" }} >\r\n                                    <Form.Label>Your Comment</Form.Label>\r\n                                    <Form.Control\r\n                                        as=\"textarea\"\r\n                                        type='text'\r\n                                        value={comment}\r\n                                        onChange={(event) => setComment(event.target.value)} />\r\n                                    <Button type=\"submit\">Send comment</Button>\r\n                                </Form.Group>\r\n                            </Form.Row>\r\n                        </Form>\r\n                    </Card>\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default CommentInput\r\n","import React from \"react\"\r\nimport Toast from \"react-bootstrap/Toast\"\r\n\r\nconst SingleMessage = ({ message }) => {\r\n    const date = new Date(message.date)\r\n    const year = date.getFullYear()\r\n    const month = date.getMonth()\r\n    const day = date.getDate()\r\n    const hour = date.getHours()\r\n    let minutes = date.getMinutes()\r\n    minutes = minutes.toString().length === 1\r\n        ? \"0\" + minutes.toString()\r\n        : minutes\r\n    return (\r\n        <Toast style={{margin:\"auto\", marginTop:10}}>\r\n            <Toast.Header closeButton={false}>\r\n                <strong className=\"mr-auto\">{message.name}</strong>\r\n                <small>{day + \"/\" + month + \"/\" + year + \" \" + hour + \":\" + minutes}</small>\r\n            </Toast.Header>\r\n            <Toast.Body>{message.text}</Toast.Body>\r\n        </Toast>\r\n    )\r\n}\r\n\r\nexport default SingleMessage\r\n","import React from \"react\"\r\nimport SingleMessage from \"./SingleMessage\"\r\n\r\nconst MessageList = ({messages}) => {\r\n    return (\r\n        <>\r\n            <div style={{ position: \"sticky\", padding: 10 }} >\r\n                {messages.map((message, index) => {\r\n                    return (<SingleMessage key={index}message={message} />)\r\n                })}\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default MessageList\r\n","import { useState, useEffect } from 'react';\r\n\r\nfunction getWindowDimensions() {\r\n  const { innerWidth: width, innerHeight: height } = window;\r\n  return {\r\n    width,\r\n    height\r\n  };\r\n}\r\n\r\nexport default function useWindowDimensions() {\r\n  const [windowDimensions, setWindowDimensions] = useState(getWindowDimensions());\r\n\r\n  useEffect(() => {\r\n    function handleResize() {\r\n      setWindowDimensions(getWindowDimensions());\r\n    }\r\n\r\n    window.addEventListener('resize', handleResize);\r\n    return () => window.removeEventListener('resize', handleResize);\r\n  }, []);\r\n\r\n  return windowDimensions;\r\n}","import React, { useState, useEffect, useRef } from 'react'\r\nimport openSocket from \"socket.io-client\"\r\nimport { useImmer } from 'use-immer'\r\nimport Alert from \"react-bootstrap/Alert\"\r\nimport Button from \"react-bootstrap/Button\"\r\nimport Spinner from '../Spinner'\r\nimport CommentInput from './CommentInput'\r\nimport MessageList from \"./MessageList\"\r\nimport useWindowDimensions from '../../utils/useWindowDimensions'\r\n\r\n\r\nconst ConversationView = (props) => {\r\n    const [conversation, setConversation] = useState({})\r\n    const [messages, setMessages] = useImmer([])\r\n    const [id] = useState(props.match.params.id)\r\n    const [error, setError] = useState(\"\")\r\n    const [socket, setSocket] = useState(null)\r\n    const { height, width } = useWindowDimensions();\r\n    const bottom = useRef(null)\r\n    const top = useRef(null)\r\n\r\n    useEffect(() => {\r\n        let openedSocket\r\n        const openConnection = () => {\r\n            openedSocket = openSocket((process.env.NODE_ENV === \"production\" ?\r\n                \"https://roninchatapp.herokuapp.com/\" :\r\n                \"http://localhost:5000\"))\r\n            openedSocket.connect()\r\n            openedSocket.emit(\"JOIN_ROOM\", id)\r\n            openedSocket.on(\"SET_CONVERSATION\", (newConversation) => {\r\n                setConversation(newConversation)\r\n                setMessages(draft => {\r\n                    newConversation.messages.map(msg => draft.push(msg))\r\n                })\r\n            })\r\n            openedSocket.on(\"UPDATE_CONVERSATION\", (newComment) => {\r\n                setMessages(draft => {\r\n                    draft.push(newComment)\r\n                })\r\n            })\r\n            openedSocket.on(\"SET_ERROR\", (error) => {\r\n                setError(error)\r\n            })\r\n            setSocket(openedSocket)\r\n        }\r\n        if (!socket) {\r\n            openConnection()\r\n        }\r\n\r\n        return function cleanup() {\r\n            openedSocket.emit(\"LEAVE_ROOM\", id)\r\n            openedSocket.disconnect()\r\n        }\r\n    }, [])\r\n\r\n    const scrollToRef = (ref) => window.scrollTo(0, ref.current.offsetTop)\r\n    const goToLast = () => scrollToRef(bottom)\r\n    const goToTop = () => scrollToRef(top)\r\n\r\n    return (\r\n        <>\r\n            <div className=\"container\" style={{ textAlign: \"left\" }}>\r\n                <div className=\"row\" >\r\n                    <div className=\"col\" style={{ width: \"100%\"}}>\r\n                        <h2 style={{ width: \"100%\", margin: \"30px\", textAlign: \"center\" }}>\r\n                            {conversation.title}\r\n                        </h2>\r\n                        <Button onClick={goToLast}>Go to last</Button>\r\n                        {error\r\n                            ?\r\n                            <Alert variant='danger' style={{ position: \"fixed\", top: 0, left: 0, right: 0 }}>\r\n                                {error}\r\n                            </Alert>\r\n                            : null\r\n                        }\r\n                        <div ref={top} style={{ visibility: \"hidden\", height: \"1px\", float: \"left\", clear: \"both\" }} />\r\n                        {messages\r\n                            ? <MessageList messages={messages} />\r\n                            : <Spinner />\r\n                        }\r\n                        <div ref={bottom} style={{ visibility: \"hidden\", height: \"1px\", float: \"left\", clear: \"both\" }} />\r\n                        <Button onClick={goToTop}>Go to top</Button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"container\" style={{ maxHeight: (height / 3.5), height: (height / 3.5) }}>\r\n                <CommentInput setError={setError} goToLast={goToLast} propsId={id} socket={socket} />\r\n            </div >\r\n        </>\r\n    )\r\n}\r\nexport default ConversationView","import React from \"react\"\r\nimport Nav from 'react-bootstrap/Nav'\r\nimport Navbar from 'react-bootstrap/Navbar'\r\nimport { Link } from 'react-router-dom'\r\n\r\nconst Menu = () => {\r\n    return (\r\n        <Navbar collapseOnSelect bg=\"light\" expand=\"lg\">\r\n            <Navbar.Brand as={Link} href='#' to='/'>Ronin ChatApp</Navbar.Brand>\r\n            <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n            <Navbar.Collapse id=\"basic-navbar-nav\">\r\n                <Nav className=\"mr-auto\">\r\n                    <Nav.Link as={Link} href='#' data-testid='restaurantList-link' to='/'>\r\n                        Conversation list\r\n                     </Nav.Link>\r\n                    <Nav.Link as={Link} href='#' to='/newconversation'>\r\n                        Create a new conversation\r\n                    </Nav.Link>\r\n                </Nav>\r\n            </Navbar.Collapse>\r\n        </Navbar>\r\n    )\r\n}\r\n\r\nexport default Menu","import React from 'react';\nimport './App.css';\nimport ConversationList from './components/ConversationList/ConversationList'\nimport NewConversationForm from './components/Menu/NewConversationForm'\nimport ConversationView from './components/ConversationView/ConversationView'\nimport Menu from './components/Menu/Menu'\nimport { Route } from 'react-router-dom'\n\nconst App = () => {\n  return (\n    <div id=\"AppWrapper\" className=\"App\">\n      <Menu/ >\n      <Route exact path=\"/\" component={ConversationList}/>\n      <Route exact path=\"/newConversation\" component={NewConversationForm}/>\n      <Route exact path=\"/conversations/:id\" component={ConversationView}/>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { BrowserRouter as Router } from 'react-router-dom'\n\nReactDOM.render(\n    <Router>\n        <App />\n    </Router>\n    , document.getElementById('root'));\n"],"sourceRoot":""}