{"version":3,"sources":["services/conversation.js","components/ConversationList/ConversationListItem.js","components/Spinner.js","components/ConversationList/ConversationCarousel.js","components/ConversationList/ConversationList.js","components/Menu/NewConversationForm.js","components/ConversationView/CommentInput.js","components/ConversationView/SingleMessage.js","components/ConversationView/MessageList.js","utils/useWindowDimensions.js","components/ConversationView/ConversationView.js","components/Menu/Menu.js","App.js","index.js"],"names":["axios","require","baseUrl","a","async","console","log","get","response","data","conversation","post","ConversationItem","id","className","to","src","image","title","description","SpinnerToExport","Spinner","animation","role","ConversationCarousel","conversations","Carousel","map","Item","key","style","textAlign","width","height","background","fluid","maxWidth","maxHeight","alt","Caption","ConversationList","useState","setConversations","popularConversations","setPopularConversations","loading","setLoading","useEffect","conversationService","fetched","Array","from","sort","conversationA","conversationB","messages","length","slice","fetchData","NewConversationForm","show","setShow","error","setError","setTitle","imagePreview","setImagePreview","setImage","setDescription","history","useHistory","postConversation","e","preventDefault","savedConversation","push","handleClose","goBack","acceptFile","file","fileUrl","rejectFile","reason","verifyImage","url","callback","img","Image","onload","size","onerror","Modal","onHide","Header","closeButton","Title","Body","Alert","Form","onSubmit","Group","Label","htmlFor","Control","type","name","onChange","target","value","accept","event","files","reader","FileReader","onloadend","result","accepted","readAsDataURL","Text","Footer","Button","variant","onClick","CommentInput","goToLast","propsId","socket","sender","setSender","comment","setComment","verifyComment","acceptComment","emit","text","date","Date","now","rejectComment","position","bottom","Card","padding","left","right","sendComment","Row","as","Col","sm","marginLeft","marginRight","InputGroup","Prepend","placeholder","required","SingleMessage","message","year","getFullYear","month","getMonth","day","getDate","hour","getHours","minutes","getMinutes","toString","Toast","margin","marginTop","MessageList","getWindowDimensions","window","innerWidth","innerHeight","ConversationView","props","setConversation","useImmer","setMessages","match","params","setSocket","windowDimensions","setWindowDimensions","handleResize","addEventListener","removeEventListener","useWindowDimensions","useRef","top","openedSocket","openSocket","connect","on","newConversation","draft","msg","newComment","disconnect","scrollToRef","ref","scrollTo","current","offsetTop","visibility","float","clear","Menu","Navbar","collapseOnSelect","bg","expand","Brand","Link","href","Toggle","aria-controls","Collapse","Nav","data-testid","App","exact","path","component","ReactDOM","render","document","getElementById"],"mappings":"4QAAMA,EAAQC,EAAQ,KAChBC,EAAU,qBAsBD,EArBA,0BAAAC,EAAAC,OAAA,uDACXC,QAAQC,IAAIJ,GADD,WAAAC,EAAA,MAEYH,EAAMO,IAAIL,IAFtB,cAELM,EAFK,OAGXH,QAAQC,IAAIE,GAHD,kBAIJA,EAASC,MAJL,sCAqBA,EAdH,SAAOC,GAAP,eAAAP,EAAAC,OAAA,uDACRC,QAAQC,IAAII,GADJ,WAAAP,EAAA,MAEeH,EAAMW,KAAKT,EAASQ,IAFnC,cAEFF,EAFE,OAGRH,QAAQC,IAAIE,EAASC,MAHb,kBAIDD,EAASC,MAJR,sC,QCcGG,G,OAnBU,SAAC,GAAsB,IAApBF,EAAmB,EAAnBA,aACxB,OACI,oCACI,yBAAKG,GAAG,OACJ,yBAAKC,UAAU,mBACX,kBAAC,IAAD,CAAMC,GAAI,kBAAoBL,EAAaG,IACvC,yBAAKG,IAAKN,EAAaO,QACvB,yBAAKH,UAAU,QACX,4BAAKJ,EAAaQ,OAClB,2BAAIR,EAAaS,aACjB,uBAAGL,UAAU,QAAb,e,QCHbM,EARS,WACpB,OACI,kBAACC,EAAA,EAAD,CAASC,UAAU,SAASC,KAAK,UAC7B,0BAAMT,UAAU,WAAhB,gB,gBCyBGU,EA3Bc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAC5B,OACI,oCACI,kBAACC,EAAA,EAAD,KACKD,EAAcE,KAAI,SAAAjB,GACf,OACI,kBAACgB,EAAA,EAASE,KAAV,CAAeC,IAAKnB,EAAaG,GAAIiB,MAAO,CAAEC,UAAW,SAAUC,MAAO,OAAQC,OAAQ,QAASC,WAAY,SAC3G,6BACI,kBAAC,IAAD,CACIC,OAAK,EACLL,MAAO,CAACM,SAAU,OAAQC,UAAW,QACrCrB,IAAKN,EAAaO,MAClBqB,IAAI,iBAGZ,kBAACZ,EAAA,EAASa,QAAV,KACI,4BAAK7B,EAAaQ,OAClB,2BAAIR,EAAaS,qBCgClCqB,EA/CU,WAAO,IAAD,EACeC,mBAAS,IADxB,mBACpBhB,EADoB,KACLiB,EADK,OAE6BD,mBAAS,IAFtC,mBAEpBE,EAFoB,KAEEC,EAFF,OAGGH,oBAAS,GAHZ,mBAGpBI,EAHoB,KAGXC,EAHW,KAgB3B,OAXAC,qBAAU,YACY,mBAAA5C,EAAAC,OAAA,uDACd0C,GAAW,GADG,WAAA3C,EAAA,MAEQ6C,KAFR,OAERC,EAFQ,OAGdP,EAAiBO,GACjBL,EAAwBM,MAAMC,KAAKF,GAASG,MAAK,SAACC,EAAeC,GAAhB,OAAkCA,EAAcC,SAASC,OAASH,EAAcE,SAASC,UAASC,MAAM,EAAG,KAC5JX,GAAW,GALG,qCAOlBY,KACD,IAGC,oCACI,yBAAK5C,UAAU,aACX,yBAAKA,UAAU,MAAMgB,MAAO,CAAEE,MAAO,OAAQD,UAAW,WACpD,yBAAKjB,UAAU,UACX,qDACC+B,EACG,kBAAC,EAAD,MAEA,6BACI,kBAAC,EAAD,CAAsBpB,cAAekB,OAKrD,yBAAK7B,UAAU,MAAMgB,MAAO,CAAEE,MAAO,OAAQD,UAAW,WACpD,yBAAKjB,UAAU,UACX,iDACC+B,EACG,kBAAC,EAAD,MAEA,6BACKpB,EAAcE,KAAI,SAAAjB,GAAY,OAAI,kBAAC,EAAD,CAAsBmB,IAAKnB,EAAaG,GAAIH,aAAcA,a,uCCgF9GiD,EAnHa,WAAO,IAAD,EACNlB,oBAAS,GADH,mBACvBmB,EADuB,KACjBC,EADiB,OAEJpB,mBAAS,IAFL,mBAEvBqB,EAFuB,KAEhBC,EAFgB,OAGJtB,mBAAS,IAHL,mBAGvBvB,EAHuB,KAGhB8C,EAHgB,OAIAvB,oBAAS,GAJT,mBAIvBI,EAJuB,KAIdC,EAJc,OAKUL,qBALV,mBAKvBwB,EALuB,KAKTC,EALS,OAMJzB,qBANI,mBAMvBxB,EANuB,KAMhBkD,EANgB,OAOQ1B,mBAAS,IAPjB,mBAOvBtB,EAPuB,KAOViD,EAPU,KAQxBC,EAAUC,cAEVC,EAAmB,SAAOC,GAAP,iBAAArE,EAAAC,OAAA,mDACrBoE,EAAEC,iBACF3B,GAAW,KACP5B,GAASC,GAAeF,GAHP,wBAIXP,EAAe,IACRQ,MAAQA,EACrBR,EAAaS,YAAcA,EAC3BT,EAAaO,MAAQgD,EAPJ,WAAA9D,EAAA,MAQe6C,EAAwBtC,IARvC,OAQXgE,EARW,OASjBL,EAAQM,KAAK,kBAAoBD,EAAkB7D,IATlC,wBAWjBiC,GAAW,GACXiB,EAAS,+DAZQ,uCAgBnBa,EAAc,WAChBf,GAAQ,GACRQ,EAAQQ,UAiBNC,EAAa,SAACC,EAAMC,GACtBb,EAASY,GACT1E,QAAQC,IAAI,gBAAiByE,GAC7Bb,EAAgBc,GAChBjB,KAGEkB,EAAa,SAACC,GAChBf,IACAD,IACAH,EAASmB,IAGPC,EAAc,SAACC,EAAKL,EAAMM,GAC5B,IAAIC,EAAM,IAAIC,MACdD,EAAIE,OAAS,WACTT,EAAKU,KAAO,QACNJ,GAAS,EAAM,IACfA,GAAS,EAAO,uBAE1BC,EAAII,QAAU,kBAAML,GAAS,EAAO,0BACpCC,EAAItE,IAAMoE,GAGd,OACI,oCACI,kBAACO,EAAA,EAAD,CAAO/B,KAAMA,EAAMgC,OAAQhB,EAAatD,WAAW,GAC/C,kBAACqE,EAAA,EAAME,OAAP,CAAcC,aAAW,GACrB,kBAACH,EAAA,EAAMI,MAAP,mCAEHlD,EACG,oCAAE,kBAAC,EAAD,OAEF,oCACI,kBAAC8C,EAAA,EAAMK,KAAP,KACKlC,GAAS,kBAACmC,EAAA,EAAD,CAAOnF,UAAU,sBAAsBgD,GACjD,yBAAKhD,UAAU,YACX,kBAACoF,EAAA,EAAD,CAAMC,SAAU5B,GACZ,kBAAC2B,EAAA,EAAKE,MAAN,KACI,kBAACF,EAAA,EAAKG,MAAN,CAAYC,QAAQ,SAApB,gCACA,kBAACJ,EAAA,EAAKK,QAAN,CAAcC,KAAK,OAAOC,KAAK,QAAQC,SAAU,SAAAlC,GAAC,OAAIR,EAASQ,EAAEmC,OAAOC,WAE5E,kBAACV,EAAA,EAAKE,MAAN,KACI,kBAACF,EAAA,EAAKG,MAAN,CAAYC,QAAQ,eAApB,qCACA,kBAACJ,EAAA,EAAKK,QAAN,CAAcC,KAAK,OAAOC,KAAK,QAAQC,SAAU,SAAAlC,GAAC,OAAIJ,EAAeI,EAAEmC,OAAOC,WAElF,kBAACV,EAAA,EAAKE,MAAN,KACI,kBAACF,EAAA,EAAKG,MAAN,CAAYC,QAAQ,SAApB,gCACA,kBAACJ,EAAA,EAAKK,QAAN,CAAcC,KAAK,OAAOC,KAAK,QAAQI,OAAO,UAAUH,SA9DpE,SAAOI,GAAP,iBAAA3G,EAAAC,OAAA,gDACpB8D,IACMa,EAAO+B,EAAMH,OAAOI,MAAM,IAC1BC,EAAS,IAAIC,YACZC,UAAY,WACf/B,EAAY6B,EAAOG,OAAQpC,GAAM,SAACqC,EAAUlC,GACxCkC,EACMtC,EAAWC,EAAMiC,EAAOG,QACxBlC,EAAWC,OAGzB8B,EAAOK,cAActC,GAXD,wCA+DY,kBAACmB,EAAA,EAAKoB,KAAN,qCAIXrD,GAAgB,yBAAKnC,MAAO,CAAEC,UAAW,WAAzB,aAA+C,6BAAK,yBAAKf,IAAKiD,EAAcnC,MAAO,CAAEO,UAAW,SAAWC,IAAI,yBAEpI,kBAACqD,EAAA,EAAM4B,OAAP,KACI,kBAACC,EAAA,EAAD,CAAQC,QAAQ,YAAYC,QAAS9C,GAArC,SAGA,kBAAC4C,EAAA,EAAD,CAAQC,QAAQ,UAAUC,QAASnD,GAAnC,qB,yDC1CboD,EAhEM,SAAC,GAA6C,IAAD,EAA1C5D,EAA0C,EAA1CA,SAAU6D,EAAgC,EAAhCA,SAAUC,EAAsB,EAAtBA,QAASC,EAAa,EAAbA,OAAa,EAClCrF,mBAAS,IADyB,mBACvDsF,EADuD,KAC/CC,EAD+C,OAEjDvF,mBAASoF,GAAfhH,EAFuD,sBAGhC4B,mBAAS,IAHuB,mBAGvDwF,EAHuD,KAG9CC,EAH8C,KAWxDC,EAAgB,WAClB,OAAQJ,GAAUE,GAEhBG,EAAgB,WAClBN,EAAOO,KAAK,eAAgBxH,EAAI,CAAE4F,KAAMsB,EAAQO,KAAML,EAASM,KAAMC,KAAKC,QAC1EP,EAAW,IACXnE,EAAS,IACT6D,KAGEc,EAAgB,WAClB3E,EAAS,2BAGb,OACI,oCACI,yBAAKjD,UAAU,OACX,4BAAKA,UAAU,OAAf,0BAA+B,OAA/B,sBAA4C,CAAEoB,WAAY,QAASyG,SAAU,QAASC,OAAQ,EAAG5G,MAAO,SAAxG,GACI,kBAAC6G,EAAA,EAAD,CAAM/G,MAAO,CAAEI,WAAY,QAAS4G,QAAQ,GAAIH,SAAU,QAASC,OAAQ,EAAGG,KAAM,EAAGC,MAAO,EAAGhH,MAAO,SACpG,kBAACkE,EAAA,EAAD,CAAMC,SAAU,SAACW,GAAD,OAzBhB,SAACA,GACjBA,EAAMrC,iBACN0D,IACMC,IACAM,IAqBqCO,CAAYnC,IAAQhG,UAAU,gBACrD,kBAACoF,EAAA,EAAKgD,IAAN,KACI,kBAAChD,EAAA,EAAKE,MAAN,CAAY+C,GAAIC,IAAKC,GAAG,IAAIvH,MAAO,CAAEwH,WAAY,OAAQC,YAAa,SAClE,kBAACrD,EAAA,EAAKG,MAAN,kBACA,kBAACmD,EAAA,EAAD,KACI,kBAACA,EAAA,EAAWC,QAAZ,KACI,kBAACD,EAAA,EAAWlC,KAAZ,WAEJ,kBAACpB,EAAA,EAAKK,QAAN,CACIC,KAAK,OACLkD,YAAY,WACZ9C,MAAOmB,EACPrB,SAAU,SAACI,GAAD,OAAWkB,EAAUlB,EAAMH,OAAOC,QAC5C+C,UAAQ,MAGpB,kBAACzD,EAAA,EAAKE,MAAN,CAAY+C,GAAIC,IAAKC,GAAG,IAAIvH,MAAO,CAAEwH,WAAY,OAAQC,YAAa,SAClE,kBAACrD,EAAA,EAAKG,MAAN,qBACA,kBAACH,EAAA,EAAKK,QAAN,CACI4C,GAAG,WACH3C,KAAK,OACLI,MAAOqB,EACPvB,SAAU,SAACI,GAAD,OAAWoB,EAAWpB,EAAMH,OAAOC,UACjD,kBAACY,EAAA,EAAD,CAAQhB,KAAK,UAAb,wB,QCpCrBoD,EArBO,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACftB,EAAO,IAAIC,KAAKqB,EAAQtB,MACxBuB,EAAOvB,EAAKwB,cACZC,EAAQzB,EAAK0B,WACbC,EAAM3B,EAAK4B,UACXC,EAAO7B,EAAK8B,WACdC,EAAU/B,EAAKgC,aAInB,OAHAD,EAAwC,IAA9BA,EAAQE,WAAWhH,OACvB,IAAM8G,EAAQE,WACdF,EAEF,kBAACG,EAAA,EAAD,CAAO3I,MAAO,CAAC4I,OAAO,OAAQC,UAAU,KACpC,kBAACF,EAAA,EAAM5E,OAAP,CAAcC,aAAa,GACvB,4BAAQhF,UAAU,WAAW+I,EAAQpD,MACrC,+BAAQ2D,EAAO,IAAME,EAAU,IAAMJ,EAAM,IAAMF,EAAQ,IAAMF,IAEnE,kBAACW,EAAA,EAAMzE,KAAP,KAAa6D,EAAQvB,QCJlBsC,EAZK,SAAC,GAAgB,IAAfrH,EAAc,EAAdA,SAClB,OACI,oCACI,yBAAKzB,MAAO,CAAE6G,SAAU,SAAUG,QAAS,KACtCvF,EAAS5B,KAAI,SAAAkI,GACV,OAAQ,kBAAC,EAAD,CAAeA,QAASA,UCNpD,SAASgB,IAAuB,IAAD,EACsBC,OACnD,MAAO,CACL9I,MAH2B,EACrB+I,WAGN9I,OAJ2B,EACF+I,aCQ7B,IA2EeC,EA3EU,SAACC,GAAW,IAAD,EACQzI,mBAAS,IADjB,mBACzB/B,EADyB,KACXyK,EADW,OAEAC,YAAS,IAFT,mBAEzB7H,EAFyB,KAEf8H,EAFe,OAGnB5I,mBAASyI,EAAMI,MAAMC,OAAO1K,IAAlCA,EAHyB,sBAIN4B,mBAAS,IAJH,mBAIzBqB,EAJyB,KAIlBC,EAJkB,OAKJtB,mBAAS,MALL,mBAKzBqF,EALyB,KAKjB0D,EALiB,ODDrB,WAAgC,IAAD,EACI/I,mBAASoI,KADb,mBACrCY,EADqC,KACnBC,EADmB,KAY5C,OATA3I,qBAAU,WACR,SAAS4I,IACPD,EAAoBb,KAItB,OADAC,OAAOc,iBAAiB,SAAUD,GAC3B,kBAAMb,OAAOe,oBAAoB,SAAUF,MACjD,IAEIF,ECLqBK,GAAlB7J,EANwB,EAMxBA,OACF2G,GAP0B,EAMhB5G,MACD+J,iBAAO,OAChBC,EAAMD,iBAAO,MAEnBhJ,qBAAU,WACN,IAAIkJ,EA8BJ,OAJKnE,KAxBDmE,EAAeC,IACX,wCAESC,UACbF,EAAa5D,KAAK,YAAaxH,GAC/BoL,EAAaG,GAAG,oBAAoB,SAACC,GACjChM,QAAQC,IAAI,uBAAwB+L,GACpChM,QAAQC,IAAI,gCAAiC+L,EAAgB9I,UAC7D4H,EAAgBkB,GAChBhB,GAAY,SAAAiB,GACRD,EAAgB9I,SAAS5B,KAAI,SAAA4K,GAAG,OAAID,EAAM3H,KAAK4H,YAGvDN,EAAaG,GAAG,uBAAuB,SAACI,GACpCnM,QAAQC,IAAI,wBAAyBkM,GACrCnB,GAAY,SAAAiB,GACRA,EAAM3H,KAAK6H,SAGnBP,EAAaG,GAAG,aAAa,SAACtI,GAC1BC,EAASD,MAEb0H,EAAUS,IAMP,WACHA,EAAa5D,KAAK,aAAcxH,GAChCoL,EAAaQ,gBAElB,IAEH,IAAMC,EAAc,SAACC,GAAD,OAAS7B,OAAO8B,SAAS,EAAGD,EAAIE,QAAQC,YACtDlF,EAAW,kBAAM8E,EAAY9D,IAGnC,OACI,oCACI,yBAAK9H,UAAU,YAAYgB,MAAO,CAAEC,UAAW,SAC3C,yBAAKjB,UAAU,OACX,yBAAKA,UAAU,MAAMgB,MAAO,CAAEE,MAAO,OAAQ0I,OAAQ,SACjD,wBAAI5I,MAAO,CAAEE,MAAO,OAAQ0I,OAAQ,SAAWhK,EAAaQ,OAC5D,kBAACsG,EAAA,EAAD,CAAQE,QAASE,GAAjB,cACC9D,EAAQ,kBAACmC,EAAA,EAAD,CAAOwB,QAAQ,SAAS3F,MAAO,CAAE6G,SAAU,QAASqD,IAAK,EAAGjD,KAAM,EAAGC,MAAO,IAAMlF,GAAiB,KAC5G,yBAAK6I,IAAKX,EAAKlK,MAAO,CAAEiL,WAAY,SAAU9K,OAAQ,MAAO+K,MAAO,OAAQC,MAAO,UAClF1J,EACK,kBAAC,EAAD,CAAaA,SAAUA,IACvB,kBAAC,EAAD,MAEN,yBAAKoJ,IAAK/D,EAAQ9G,MAAO,CAAEiL,WAAY,SAAU9K,OAAQ,MAAO+K,MAAO,OAAQC,MAAO,UACtF,kBAACzF,EAAA,EAAD,CAAQE,QAhBZ,kBAAMgF,EAAYV,KAgBd,gBAIZ,yBAAKlL,UAAU,YAAYgB,MAAO,CAAEO,UAAYJ,EAAS,IAAMA,OAASA,EAAS,MAC7E,kBAAC,EAAD,CAAc8B,SAAUA,EAAU6D,SAAUA,EAAUC,QAAShH,EAAIiH,OAAQA,O,gBCzD5EoF,EAnBF,WACT,OACI,kBAACC,EAAA,EAAD,CAAQC,kBAAgB,EAACC,GAAG,QAAQC,OAAO,MACvC,kBAACH,EAAA,EAAOI,MAAR,CAAcpE,GAAIqE,IAAMC,KAAK,IAAI1M,GAAG,KAApC,iBACA,kBAACoM,EAAA,EAAOO,OAAR,CAAeC,gBAAc,qBAC7B,kBAACR,EAAA,EAAOS,SAAR,CAAiB/M,GAAG,oBAChB,kBAACgN,EAAA,EAAD,CAAK/M,UAAU,WACX,kBAAC+M,EAAA,EAAIL,KAAL,CAAUrE,GAAIqE,IAAMC,KAAK,IAAIK,cAAY,sBAAsB/M,GAAG,KAAlE,qBAGA,kBAAC8M,EAAA,EAAIL,KAAL,CAAUrE,GAAIqE,IAAMC,KAAK,IAAI1M,GAAG,oBAAhC,iCCILgN,EAXH,WACV,OACE,yBAAKlN,GAAG,aAAaC,UAAU,OAC7B,kBAAC,EAAD,MACA,kBAAC,IAAD,CAAOkN,OAAK,EAACC,KAAK,IAAIC,UAAW1L,IACjC,kBAAC,IAAD,CAAOwL,OAAK,EAACC,KAAK,mBAAmBC,UAAWvK,IAChD,kBAAC,IAAD,CAAOqK,OAAK,EAACC,KAAK,qBAAqBC,UAAWjD,MCRxDkD,IAASC,OACL,kBAAC,IAAD,KACI,kBAAC,EAAD,OAEFC,SAASC,eAAe,U","file":"static/js/main.6db5f475.chunk.js","sourcesContent":["const axios = require('axios')\r\nconst baseUrl = \"/api/conversations\"\r\nconst getAll = async () => {\r\n    console.log(baseUrl)\r\n    const response = await axios.get(baseUrl)\r\n    console.log(response)\r\n    return response.data\r\n}\r\n\r\nconst add = async (conversation) => {\r\n    console.log(conversation)\r\n    const response = await axios.post(baseUrl, conversation)\r\n    console.log(response.data)\r\n    return response.data\r\n}\r\n\r\nconst getOne = async (id) => {\r\n    console.log(id)\r\n    const response = await axios.get(baseUrl + \"/\" + id)\r\n    console.log (response.data)\r\n    return response.data\r\n}\r\n\r\nexport default { getAll, add, getOne }","import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport './ConversationListItem.css';\r\n\r\nconst ConversationItem = ({ conversation }) => {\r\n    return (\r\n        <>\r\n            <div id=\"all\">\r\n                <div className=\"view view-first\">\r\n                    <Link to={\"/conversations/\" + conversation.id}>\r\n                        <img src={conversation.image} />\r\n                        <div className=\"mask\">\r\n                            <h2>{conversation.title}</h2>\r\n                            <p>{conversation.description}</p>\r\n                            <a className=\"info\">Join</a>\r\n                        </div>\r\n                    </Link>\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ConversationItem\r\n","import Spinner from 'react-bootstrap/Spinner'\r\nimport React from 'react'\r\n\r\nconst SpinnerToExport = () => {\r\n    return (\r\n        <Spinner animation=\"border\" role=\"status\">\r\n            <span className=\"sr-only\">Loading...</span>\r\n        </Spinner>\r\n    )\r\n}\r\n\r\nexport default SpinnerToExport","import React from \"react\"\r\nimport Carousel from \"react-bootstrap/Carousel\"\r\nimport Image from \"react-bootstrap/Image\"\r\n\r\nconst ConversationCarousel = ({ conversations }) => {\r\n    return (\r\n        <>\r\n            <Carousel>\r\n                {conversations.map(conversation => {\r\n                    return (\r\n                        <Carousel.Item key={conversation.id} style={{ textAlign: \"center\", width: \"100%\", height: \"360px\", background: \"gray\" }}>\r\n                            <div>\r\n                                <Image\r\n                                    fluid\r\n                                    style={{maxWidth: \"100%\", maxHeight: \"100%\" }}\r\n                                    src={conversation.image}\r\n                                    alt=\"First slide\"\r\n                                />\r\n                            </div>\r\n                            <Carousel.Caption>\r\n                                <h3>{conversation.title}</h3>\r\n                                <p>{conversation.description}</p>\r\n                            </Carousel.Caption>\r\n                        </Carousel.Item>\r\n                    )\r\n                })}\r\n            </Carousel>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ConversationCarousel","import React, { useState, useEffect } from 'react'\r\nimport conversationService from '../../services/conversation'\r\nimport ConversationListItem from './ConversationListItem'\r\nimport Spinner from '../Spinner'\r\nimport ConversationCarousel from './ConversationCarousel'\r\n\r\nconst ConversationList = () => {\r\n    const [conversations, setConversations] = useState([])\r\n    const [popularConversations, setPopularConversations] = useState([])\r\n    const [loading, setLoading] = useState(true)\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            setLoading(true)\r\n            const fetched = await conversationService.getAll()\r\n            setConversations(fetched)\r\n            setPopularConversations(Array.from(fetched).sort((conversationA, conversationB) => conversationB.messages.length - conversationA.messages.length ).slice(0, 10))\r\n            setLoading(false)\r\n        }\r\n        fetchData()\r\n    }, [])\r\n\r\n    return (\r\n        <>\r\n            <div className=\"container\">\r\n                <div className=\"row\" style={{ width: \"100%\", textAlign: \"center\" }} >\r\n                    <div className=\"col-sm\">\r\n                        <h2>Popular Conversations</h2>\r\n                        {loading ?\r\n                            <Spinner />\r\n                            :\r\n                            <div>\r\n                                <ConversationCarousel conversations={popularConversations} />\r\n                            </div>\r\n                        }\r\n                    </div>\r\n                </div>\r\n                <div className=\"row\" style={{ width: \"100%\", textAlign: \"center\" }} >\r\n                    <div className=\"col-sm\">\r\n                        <h2>All Conversations</h2>\r\n                        {loading ?\r\n                            <Spinner />\r\n                            :\r\n                            <div>\r\n                                {conversations.map(conversation => <ConversationListItem key={conversation.id} conversation={conversation} />)}\r\n                            </div>\r\n                        }\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\nexport default ConversationList","import React, { useState } from \"react\"\r\nimport Modal from \"react-bootstrap/Modal\"\r\nimport Button from \"react-bootstrap/Button\"\r\nimport Alert from \"react-bootstrap/Alert\"\r\nimport Form from \"react-bootstrap/Form\"\r\nimport conversationService from '../../services/conversation'\r\nimport { useHistory } from 'react-router-dom'\r\nimport Spinner from '../Spinner'\r\n\r\nconst NewConversationForm = () => {\r\n    const [show, setShow] = useState(true)\r\n    const [error, setError] = useState(\"\")\r\n    const [title, setTitle] = useState(\"\")\r\n    const [loading, setLoading] = useState(false)\r\n    const [imagePreview, setImagePreview] = useState()\r\n    const [image, setImage] = useState()\r\n    const [description, setDescription] = useState(\"\")\r\n    const history = useHistory()\r\n\r\n    const postConversation = async (e) => {\r\n        e.preventDefault();\r\n        setLoading(true)\r\n        if (title && description && image) {\r\n            const conversation = {}\r\n            conversation.title = title\r\n            conversation.description = description\r\n            conversation.image = imagePreview\r\n            const savedConversation = await conversationService.add(conversation)\r\n            history.push(\"/conversations/\" + savedConversation.id)\r\n        } else {\r\n            setLoading(false)\r\n            setError(\"The conversation needs a title, a description and an image.\")\r\n        }\r\n    }\r\n\r\n    const handleClose = () => {\r\n        setShow(false)\r\n        history.goBack()\r\n    }\r\n\r\n    const getUploadedFile = async (event) => {\r\n        setImagePreview()\r\n        const file = event.target.files[0]\r\n        const reader = new FileReader()\r\n        reader.onloadend = () => {\r\n            verifyImage(reader.result, file, (accepted, reason) => {\r\n                accepted\r\n                    ? acceptFile(file, reader.result)\r\n                    : rejectFile(reason)\r\n            })\r\n        }\r\n        reader.readAsDataURL(file)\r\n    }\r\n\r\n    const acceptFile = (file, fileUrl) => {\r\n        setImage(file)\r\n        console.log(\"Accepted File\", file)\r\n        setImagePreview(fileUrl)\r\n        setError()\r\n    }\r\n\r\n    const rejectFile = (reason) => {\r\n        setImage()\r\n        setImagePreview()\r\n        setError(reason)\r\n    }\r\n\r\n    const verifyImage = (url, file, callback) => {\r\n        let img = new Image();\r\n        img.onload = () => {\r\n            file.size < 5242880\r\n                ? callback(true, \"\")\r\n                : callback(false, \"File is too large.\")\r\n        }\r\n        img.onerror = () => callback(false, \"File is not an image.\")\r\n        img.src = url;\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Modal show={show} onHide={handleClose} animation={false}>\r\n                <Modal.Header closeButton>\r\n                    <Modal.Title>Create a new conversation</Modal.Title>\r\n                </Modal.Header>\r\n                {loading ?\r\n                    <><Spinner /></>\r\n                    :\r\n                    <>\r\n                        <Modal.Body>\r\n                            {error && <Alert className=\"alert alert-danger\">{error}</Alert>}\r\n                            <div className=\"postForm\">\r\n                                <Form onSubmit={postConversation}>\r\n                                    <Form.Group>\r\n                                        <Form.Label htmlFor=\"title\">Title for the Conversation: </Form.Label>\r\n                                        <Form.Control type=\"text\" name=\"title\" onChange={e => setTitle(e.target.value)} />\r\n                                    </Form.Group>\r\n                                    <Form.Group>\r\n                                        <Form.Label htmlFor=\"description\">Description of the Conversation: </Form.Label>\r\n                                        <Form.Control type=\"text\" name=\"title\" onChange={e => setDescription(e.target.value)} />\r\n                                    </Form.Group>\r\n                                    <Form.Group>\r\n                                        <Form.Label htmlFor=\"image\">Image for the Conversation: </Form.Label>\r\n                                        <Form.Control type=\"file\" name=\"image\" accept=\"image/*\" onChange={getUploadedFile} />\r\n                                        <Form.Text> Image size limit is 5mb </Form.Text>\r\n                                    </Form.Group>\r\n                                </Form>\r\n                            </div>\r\n                            {imagePreview && <div style={{ textAlign: \"center\" }}> Preview: <div><img src={imagePreview} style={{ maxHeight: \"300px\" }} alt=\"Preview goes here\" /></div></div>}\r\n                        </Modal.Body>\r\n                        <Modal.Footer>\r\n                            <Button variant=\"secondary\" onClick={handleClose}>\r\n                                Close\r\n                            </Button>\r\n                            <Button variant=\"primary\" onClick={postConversation}>\r\n                                Save Changes\r\n                            </Button>\r\n                        </Modal.Footer>\r\n                    </>\r\n                }\r\n            </Modal >\r\n        </>\r\n    )\r\n}\r\n\r\nexport default NewConversationForm","import React, {useState} from 'react'\r\nimport Col from \"react-bootstrap/Col\"\r\nimport Card from \"react-bootstrap/Card\"\r\nimport InputGroup from \"react-bootstrap/InputGroup\"\r\nimport Form from 'react-bootstrap/Form'\r\nimport Button from \"react-bootstrap/Button\"\r\n\r\nconst CommentInput = ({ setError, goToLast, propsId, socket }) => {\r\n    const [sender, setSender] = useState(\"\")\r\n    const [id] = useState(propsId)\r\n    const [comment, setComment] = useState(\"\")\r\n\r\n    const sendComment = (event) => {\r\n        event.preventDefault()\r\n        verifyComment()\r\n            ? acceptComment()\r\n            : rejectComment()\r\n    }\r\n    const verifyComment = () => {\r\n        return (sender && comment)\r\n    }\r\n    const acceptComment = () => {\r\n        socket.emit(\"POST_COMMENT\", id, { name: sender, text: comment, date: Date.now() })\r\n        setComment(\"\")\r\n        setError(\"\")\r\n        goToLast()\r\n    }\r\n\r\n    const rejectComment = () => {\r\n        setError(\"Comment can't be empty\")\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className=\"row\" >\r\n                <div className=\"col\" className=\"col\" style={{ background: \"white\", position: \"fixed\", bottom: 0, width: \"100%\" }} >\r\n                    <Card style={{ background: \"white\", padding:10, position: \"fixed\", bottom: 0, left: 0, right: 0, width: \"100%\" }} >\r\n                        <Form onSubmit={(event) => sendComment(event)} className='comment-form'>\r\n                            <Form.Row >\r\n                                <Form.Group as={Col} sm=\"3\" style={{ marginLeft: \"auto\", marginRight: \"auto\" }} >\r\n                                    <Form.Label>Your Name</Form.Label>\r\n                                    <InputGroup >\r\n                                        <InputGroup.Prepend>\r\n                                            <InputGroup.Text>@</InputGroup.Text>\r\n                                        </InputGroup.Prepend>\r\n                                        <Form.Control\r\n                                            type=\"text\"\r\n                                            placeholder=\"Username\"\r\n                                            value={sender}\r\n                                            onChange={(event) => setSender(event.target.value)}\r\n                                            required />\r\n                                    </InputGroup>\r\n                                </Form.Group>\r\n                                <Form.Group as={Col} sm=\"8\" style={{ marginLeft: \"auto\", marginRight: \"auto\" }} >\r\n                                    <Form.Label>Your Comment</Form.Label>\r\n                                    <Form.Control\r\n                                        as=\"textarea\"\r\n                                        type='text'\r\n                                        value={comment}\r\n                                        onChange={(event) => setComment(event.target.value)} />\r\n                                    <Button type=\"submit\">Send comment</Button>\r\n                                </Form.Group>\r\n                            </Form.Row>\r\n                        </Form>\r\n                    </Card>\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default CommentInput\r\n","import React from \"react\"\r\nimport Toast from \"react-bootstrap/Toast\"\r\n\r\nconst SingleMessage = ({ message }) => {\r\n    const date = new Date(message.date)\r\n    const year = date.getFullYear()\r\n    const month = date.getMonth()\r\n    const day = date.getDate()\r\n    const hour = date.getHours()\r\n    let minutes = date.getMinutes()\r\n    minutes = minutes.toString().length === 1\r\n        ? \"0\" + minutes.toString()\r\n        : minutes\r\n    return (\r\n        <Toast style={{margin:\"auto\", marginTop:10}}>\r\n            <Toast.Header closeButton={false}>\r\n                <strong className=\"mr-auto\">{message.name}</strong>\r\n                <small>{hour + \":\" + minutes + \" \" + day + \"/\" + month + \"/\" + year}</small>\r\n            </Toast.Header>\r\n            <Toast.Body>{message.text}</Toast.Body>\r\n        </Toast>\r\n    )\r\n}\r\n\r\nexport default SingleMessage\r\n","import React from \"react\"\r\nimport SingleMessage from \"./SingleMessage\"\r\n\r\nconst MessageList = ({messages}) => {\r\n    return (\r\n        <>\r\n            <div style={{ position: \"sticky\", padding: 10 }} >\r\n                {messages.map(message => {\r\n                    return (<SingleMessage message={message} />)\r\n                })}\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default MessageList\r\n","import { useState, useEffect } from 'react';\r\n\r\nfunction getWindowDimensions() {\r\n  const { innerWidth: width, innerHeight: height } = window;\r\n  return {\r\n    width,\r\n    height\r\n  };\r\n}\r\n\r\nexport default function useWindowDimensions() {\r\n  const [windowDimensions, setWindowDimensions] = useState(getWindowDimensions());\r\n\r\n  useEffect(() => {\r\n    function handleResize() {\r\n      setWindowDimensions(getWindowDimensions());\r\n    }\r\n\r\n    window.addEventListener('resize', handleResize);\r\n    return () => window.removeEventListener('resize', handleResize);\r\n  }, []);\r\n\r\n  return windowDimensions;\r\n}","import React, { useState, useEffect, useRef } from 'react'\r\nimport openSocket from \"socket.io-client\"\r\nimport { useImmer } from 'use-immer'\r\nimport Alert from \"react-bootstrap/Alert\"\r\nimport Button from \"react-bootstrap/Button\"\r\nimport Spinner from '../Spinner'\r\nimport CommentInput from './CommentInput'\r\nimport MessageList from \"./MessageList\"\r\nimport useWindowDimensions from '../../utils/useWindowDimensions'\r\n\r\n\r\nconst ConversationView = (props) => {\r\n    const [conversation, setConversation] = useState({})\r\n    const [messages, setMessages] = useImmer([])\r\n    const [id] = useState(props.match.params.id)\r\n    const [error, setError] = useState(\"\")\r\n    const [socket, setSocket] = useState(null)\r\n    const { height, width } = useWindowDimensions();\r\n    const bottom = useRef(null)\r\n    const top = useRef(null)\r\n\r\n    useEffect(() => {\r\n        let openedSocket\r\n        const openConnection = () => {\r\n            openedSocket = openSocket((process.env.NODE_ENV === \"production\" ?\r\n                \"https://roninchatapp.herokuapp.com/\" :\r\n                \"http://localhost:5000\"))\r\n            openedSocket.connect()\r\n            openedSocket.emit(\"JOIN_ROOM\", id)\r\n            openedSocket.on(\"SET_CONVERSATION\", (newConversation) => {\r\n                console.log(\"SETTING CONVERSATION\", newConversation)\r\n                console.log(\"SETTING CONVERSATION MESSAGES\", newConversation.messages)\r\n                setConversation(newConversation)\r\n                setMessages(draft => {\r\n                    newConversation.messages.map(msg => draft.push(msg))\r\n                })\r\n            })\r\n            openedSocket.on(\"UPDATE_CONVERSATION\", (newComment) => {\r\n                console.log(\"UPDATING CONVERSATION\", newComment)\r\n                setMessages(draft => {\r\n                    draft.push(newComment)\r\n                })\r\n            })\r\n            openedSocket.on(\"SET_ERROR\", (error) => {\r\n                setError(error)\r\n            })\r\n            setSocket(openedSocket)\r\n        }\r\n        if (!socket) {\r\n            openConnection()\r\n        }\r\n\r\n        return function cleanup() {\r\n            openedSocket.emit(\"LEAVE_ROOM\", id)\r\n            openedSocket.disconnect()\r\n        }\r\n    }, [])\r\n\r\n    const scrollToRef = (ref) => window.scrollTo(0, ref.current.offsetTop)\r\n    const goToLast = () => scrollToRef(bottom)\r\n    const goToTop = () => scrollToRef(top)\r\n\r\n    return (\r\n        <>\r\n            <div className=\"container\" style={{ textAlign: \"left\" }}>\r\n                <div className=\"row\" >\r\n                    <div className=\"col\" style={{ width: \"100%\", margin: \"auto\" }}>\r\n                        <h5 style={{ width: \"100%\", margin: \"auto\" }}>{conversation.title}</h5>\r\n                        <Button onClick={goToLast}>Go to last</Button>\r\n                        {error ? <Alert variant='danger' style={{ position: \"fixed\", top: 0, left: 0, right: 0 }}>{error}</Alert> : null}\r\n                        <div ref={top} style={{ visibility: \"hidden\", height: \"1px\", float: \"left\", clear: \"both\" }} />\r\n                        {messages\r\n                            ? <MessageList messages={messages} />\r\n                            : <Spinner />\r\n                        }\r\n                        <div ref={bottom} style={{ visibility: \"hidden\", height: \"1px\", float: \"left\", clear: \"both\" }} />\r\n                        <Button onClick={goToTop}>Go to top</Button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"container\" style={{ maxHeight: (height / 3.5), height: (height / 3.5) }}>\r\n                <CommentInput setError={setError} goToLast={goToLast} propsId={id} socket={socket} />\r\n            </div >\r\n        </>\r\n    )\r\n}\r\nexport default ConversationView","import React from \"react\"\r\nimport Nav from 'react-bootstrap/Nav'\r\nimport Navbar from 'react-bootstrap/Navbar'\r\nimport { Link } from 'react-router-dom'\r\n\r\nconst Menu = () => {\r\n    return (\r\n        <Navbar collapseOnSelect bg=\"light\" expand=\"lg\">\r\n            <Navbar.Brand as={Link} href='#' to='/'>Ronin ChatApp</Navbar.Brand>\r\n            <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n            <Navbar.Collapse id=\"basic-navbar-nav\">\r\n                <Nav className=\"mr-auto\">\r\n                    <Nav.Link as={Link} href='#' data-testid='restaurantList-link' to='/'>\r\n                        Conversation list\r\n                     </Nav.Link>\r\n                    <Nav.Link as={Link} href='#' to='/newconversation'>\r\n                        Create a new conversation\r\n                    </Nav.Link>\r\n                </Nav>\r\n            </Navbar.Collapse>\r\n        </Navbar>\r\n    )\r\n}\r\n\r\nexport default Menu","import React from 'react';\nimport './App.css';\nimport ConversationList from './components/ConversationList/ConversationList'\nimport NewConversationForm from './components/Menu/NewConversationForm'\nimport ConversationView from './components/ConversationView/ConversationView'\nimport Menu from './components/Menu/Menu'\nimport { Route } from 'react-router-dom'\n\nconst App = () => {\n  return (\n    <div id=\"AppWrapper\" className=\"App\">\n      <Menu/ >\n      <Route exact path=\"/\" component={ConversationList}/>\n      <Route exact path=\"/newConversation\" component={NewConversationForm}/>\n      <Route exact path=\"/conversations/:id\" component={ConversationView}/>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { BrowserRouter as Router } from 'react-router-dom'\n\nReactDOM.render(\n    <Router>\n        <App />\n    </Router>\n    , document.getElementById('root'));\n"],"sourceRoot":""}