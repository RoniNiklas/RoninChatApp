{"version":3,"sources":["services/conversation.js","components/ConversationList/ConversationListItem/ConversationListItem.js","components/Spinner.js","components/ConversationList/ConversationList.js","components/Menu/NewConversationForm.js","components/ConversationView/Sidebar/Sidebar.js","components/ConversationView/CommentInput/CommentInput.js","components/ConversationView/MessageList/SingleMessage/SingleMessage.js","components/ConversationView/MessageList/MessageList.js","utils/useWindowDimensions.js","components/ConversationView/ConversationView.js","components/Menu/Menu.js","App.js","index.js"],"names":["axios","require","baseUrl","a","async","get","response","data","conversation","post","ConversationItem","to","id","Card","className","Img","src","image","alt","Header","title","SpinnerToExport","Spinner","animation","role","ConversationList","useState","conversations","setConversations","setPopularConversations","useEffect","conversationService","fetched","Array","from","sort","conversationA","conversationB","messages","length","slice","fetchData","map","key","NewConversationForm","show","setShow","error","setError","setTitle","loading","setLoading","imagePreview","setImagePreview","setImage","description","setDescription","history","useHistory","postConversation","e","preventDefault","savedConversation","push","handleClose","goBack","acceptFile","file","fileUrl","console","log","rejectFile","reason","verifyImage","url","callback","img","Image","onload","size","onerror","Modal","onHide","closeButton","Title","Body","Alert","Form","onSubmit","Group","Label","htmlFor","Control","type","name","onChange","target","value","accept","event","files","reader","FileReader","onloadend","result","accepted","readAsDataURL","Text","style","textAlign","maxHeight","Footer","Button","variant","onClick","Sidebar","goToTop","goToLast","width","position","left","top","margin","height","CommentInput","propsId","socket","sender","setSender","comment","setComment","sendComment","trimmedComment","trim","trimmedSender","verifyComment","acceptComment","rejectComment","emit","text","date","Date","now","background","bottom","padding","right","Row","as","Col","sm","marginLeft","marginRight","InputGroup","Prepend","placeholder","required","onKeyPress","SingleMessage","message","year","getFullYear","month","getMonth","day","getDate","hour","getHours","minutes","getMinutes","toString","Toast","maxWidth","MessageList","index","getWindowDimensions","window","innerWidth","innerHeight","ConversationView","props","setConversation","useImmer","setMessages","match","params","setSocket","windowDimensions","setWindowDimensions","handleResize","addEventListener","removeEventListener","useWindowDimensions","useRef","openedSocket","openSocket","connect","on","newConversation","draft","msg","newComment","disconnect","scrollToRef","ref","scrollTo","current","offsetTop","marginBottom","Menu","Navbar","collapseOnSelect","bg","expand","Brand","Link","href","Toggle","aria-controls","Collapse","Nav","data-testid","App","exact","path","component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.73efdb2a.chunk.js","sourcesContent":["const axios = require('axios')\r\nconst baseUrl = \"/api/conversations\"\r\nconst getAll = async () => {\r\n    const response = await axios.get(baseUrl)\r\n    return response.data\r\n}\r\n\r\nconst add = async (conversation) => {\r\n    const response = await axios.post(baseUrl, conversation)\r\n    return response.data\r\n}\r\n\r\nconst getOne = async (id) => {\r\n    const response = await axios.get(baseUrl + \"/\" + id)\r\n    return response.data\r\n}\r\n\r\nexport default { getAll, add, getOne }","import React from \"react\"\r\nimport Card from \"react-bootstrap/Card\"\r\nimport { Link } from 'react-router-dom'\r\nimport \"./ConversationListItem.css\"\r\n\r\nconst ConversationItem = ({ conversation }) => {\r\n    return (\r\n        <>\r\n            <Link to={\"/conversations/\" + conversation.id}>\r\n                <Card className=\"card bg-dark text-white conversation-item\">\r\n                    <Card.Img src={conversation.image} className=\"image\" alt=\"Card image\" />\r\n                    <Card.Header>{conversation.title}</Card.Header>\r\n                </Card>\r\n            </Link>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ConversationItem\r\n","import Spinner from 'react-bootstrap/Spinner'\r\nimport React from 'react'\r\n\r\nconst SpinnerToExport = () => {\r\n    return (\r\n        <Spinner className=\"spinner\" animation=\"border\" role=\"status\">\r\n            <span className=\"sr-only\">Loading...</span>\r\n        </Spinner>\r\n    )\r\n}\r\n\r\nexport default SpinnerToExport","import React, { useState, useEffect } from 'react'\r\nimport conversationService from '../../services/conversation'\r\nimport ConversationListItem from './ConversationListItem/ConversationListItem'\r\nimport Spinner from '../Spinner'\r\nimport \"./ConversationList.css\"\r\n\r\nconst ConversationList = () => {\r\n    const [conversations, setConversations] = useState()\r\n    const [popularConversations, setPopularConversations] = useState()\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            const fetched = await conversationService.getAll()\r\n            setConversations(fetched)\r\n            setPopularConversations(Array.from(fetched).sort((conversationA, conversationB) => conversationB.messages.length - conversationA.messages.length).slice(0, 10))\r\n        }\r\n        fetchData()\r\n    }, [])\r\n\r\n    return (\r\n        <>\r\n            <h2 className=\"list-header\">All Conversations</h2>\r\n            <div className=\"conversation-list\">\r\n                {conversations ?\r\n                    <>\r\n                        {conversations.map(conversation => <ConversationListItem key={conversation.id} conversation={conversation} />)}\r\n                    </>\r\n                    :\r\n                    <Spinner />\r\n                }\r\n            </div>\r\n        </>\r\n    )\r\n}\r\nexport default ConversationList","import React, { useState } from \"react\"\r\nimport Modal from \"react-bootstrap/Modal\"\r\nimport Button from \"react-bootstrap/Button\"\r\nimport Alert from \"react-bootstrap/Alert\"\r\nimport Form from \"react-bootstrap/Form\"\r\nimport conversationService from '../../services/conversation'\r\nimport { useHistory } from 'react-router-dom'\r\nimport Spinner from '../Spinner'\r\n\r\nconst NewConversationForm = () => {\r\n    const [show, setShow] = useState(true)\r\n    const [error, setError] = useState(\"\")\r\n    const [title, setTitle] = useState(\"\")\r\n    const [loading, setLoading] = useState(false)\r\n    const [imagePreview, setImagePreview] = useState()\r\n    const [image, setImage] = useState()\r\n    const [description, setDescription] = useState(\"\")\r\n    const history = useHistory()\r\n\r\n    const postConversation = async (e) => {\r\n        e.preventDefault();\r\n        setLoading(true)\r\n        if (title && description && image) {\r\n            const conversation = {}\r\n            conversation.title = title\r\n            conversation.description = description\r\n            conversation.image = imagePreview\r\n            const savedConversation = await conversationService.add(conversation)\r\n            history.push(\"/conversations/\" + savedConversation.id)\r\n        } else {\r\n            setLoading(false)\r\n            setError(\"The conversation needs a title, a description and an image.\")\r\n        }\r\n    }\r\n\r\n    const handleClose = () => {\r\n        setShow(false)\r\n        history.goBack()\r\n    }\r\n\r\n    const getUploadedFile = async (event) => {\r\n        setImagePreview()\r\n        const file = event.target.files[0]\r\n        const reader = new FileReader()\r\n        reader.onloadend = () => {\r\n            verifyImage(reader.result, file, (accepted, reason) => {\r\n                accepted\r\n                    ? acceptFile(file, reader.result)\r\n                    : rejectFile(reason)\r\n            })\r\n        }\r\n        reader.readAsDataURL(file)\r\n    }\r\n\r\n    const acceptFile = (file, fileUrl) => {\r\n        setImage(file)\r\n        console.log(\"Accepted File\", file)\r\n        setImagePreview(fileUrl)\r\n        setError()\r\n    }\r\n\r\n    const rejectFile = (reason) => {\r\n        setImage()\r\n        setImagePreview()\r\n        setError(reason)\r\n    }\r\n\r\n    const verifyImage = (url, file, callback) => {\r\n        let img = new Image();\r\n        img.onload = () => {\r\n            file.size < 5242880\r\n                ? callback(true, \"\")\r\n                : callback(false, \"File is too large.\")\r\n        }\r\n        img.onerror = () => callback(false, \"File is not an image.\")\r\n        img.src = url;\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Modal show={show} onHide={handleClose} animation={false}>\r\n                <Modal.Header closeButton>\r\n                    <Modal.Title>Create a new conversation</Modal.Title>\r\n                </Modal.Header>\r\n                {loading ?\r\n                    <><Spinner /></>\r\n                    :\r\n                    <>\r\n                        <Modal.Body>\r\n                            {error && <Alert className=\"alert alert-danger\">{error}</Alert>}\r\n                            <div className=\"postForm\">\r\n                                <Form onSubmit={postConversation}>\r\n                                    <Form.Group>\r\n                                        <Form.Label htmlFor=\"title\">Title for the Conversation: </Form.Label>\r\n                                        <Form.Control type=\"text\" name=\"title\" onChange={e => setTitle(e.target.value)} />\r\n                                    </Form.Group>\r\n                                    <Form.Group>\r\n                                        <Form.Label htmlFor=\"description\">Description of the Conversation: </Form.Label>\r\n                                        <Form.Control type=\"text\" name=\"title\" onChange={e => setDescription(e.target.value)} />\r\n                                    </Form.Group>\r\n                                    <Form.Group>\r\n                                        <Form.Label htmlFor=\"image\">Image for the Conversation: </Form.Label>\r\n                                        <Form.Control type=\"file\" name=\"image\" accept=\"image/*\" onChange={getUploadedFile} />\r\n                                        <Form.Text> Image size limit is 5mb </Form.Text>\r\n                                    </Form.Group>\r\n                                </Form>\r\n                            </div>\r\n                            {imagePreview && <div style={{ textAlign: \"center\" }}> Preview: <div><img src={imagePreview} style={{ maxHeight: \"300px\" }} alt=\"Preview goes here\" /></div></div>}\r\n                        </Modal.Body>\r\n                        <Modal.Footer>\r\n                            <Button variant=\"secondary\" onClick={handleClose}>\r\n                                Close\r\n                            </Button>\r\n                            <Button variant=\"primary\" onClick={postConversation}>\r\n                                Save Changes\r\n                            </Button>\r\n                        </Modal.Footer>\r\n                    </>\r\n                }\r\n            </Modal >\r\n        </>\r\n    )\r\n}\r\n\r\nexport default NewConversationForm","import React from \"react\"\r\nimport Card from \"react-bootstrap/Card\"\r\nimport Button from \"react-bootstrap/Button\"\r\nimport \"./Sidebar.css\"\r\nconst Sidebar = ({ conversation, goToTop, goToLast, width }) => {\r\n    return (\r\n        <>\r\n            <Card\r\n                className=\"card bg-light text-dark sidebar-item\"\r\n                style={{\r\n                    position: (width > 720) ? \"sticky\" : \"static\",\r\n                    left: \"1em\",\r\n                    top: \"6em\",\r\n                    width: (width > 720) ? \"360px\" : 0.9*width+\"px\",\r\n                    margin: \"1em\",\r\n                    height: \"100%\"\r\n                }}\r\n            >\r\n                <Card.Img src={conversation.image} className=\"sidebar-image\" alt=\"Card image\" />\r\n                <Card.Header className=\"sidebar-header\">{conversation.title}</Card.Header>\r\n                <Card.Text className=\"sidebar-description\">{conversation.description}</Card.Text>\r\n                <Button variant=\"outline-primary\" onClick={goToTop}>Go to top</Button>\r\n                <Button variant=\"outline-primary\" onClick={goToLast}>Go to the newest message</Button>\r\n            </Card>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Sidebar\r\n","import React, { useState } from 'react'\r\nimport Col from \"react-bootstrap/Col\"\r\nimport Card from \"react-bootstrap/Card\"\r\nimport InputGroup from \"react-bootstrap/InputGroup\"\r\nimport Form from 'react-bootstrap/Form'\r\nimport Button from \"react-bootstrap/Button\"\r\n\r\nconst CommentInput = ({ setError, goToLast, propsId, socket }) => {\r\n    const [sender, setSender] = useState(\"\")\r\n    const [id] = useState(propsId)\r\n    const [comment, setComment] = useState(\"\")\r\n\r\n    const sendComment = (event) => {\r\n        event.preventDefault()\r\n        const trimmedComment = comment.trim()\r\n        const trimmedSender = sender.trim()\r\n        verifyComment(trimmedComment, trimmedSender)\r\n            ? acceptComment(trimmedComment, trimmedSender)\r\n            : rejectComment()\r\n    }\r\n    const verifyComment = (trimmedComment, trimmedSender) => {\r\n        return (trimmedComment && trimmedSender)\r\n    }\r\n    const acceptComment = (trimmedComment, trimmedSender) => {\r\n        socket.emit(\"POST_COMMENT\", id, { text: trimmedComment, name: trimmedSender, date: Date.now() })\r\n        setComment(\"\")\r\n        setError(\"\")\r\n        goToLast()\r\n    }\r\n\r\n    const rejectComment = () => {\r\n        setError(\"Neither the comment or the username can be empty\")\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className=\"row\" >\r\n                <div className=\"col\" className=\"col\" style={{ background: \"white\", position: \"fixed\", bottom: 0, width: \"100%\" }} >\r\n                    <Card style={{ background: \"white\", padding: 10, position: \"fixed\", bottom: 0, left: 0, right: 0, width: \"100%\" }} >\r\n                        <Form onSubmit={(event) => sendComment(event)} className='comment-form'>\r\n                            <Form.Row >\r\n                                <Form.Group as={Col} sm=\"3\" style={{ marginLeft: \"auto\", marginRight: \"auto\" }} >\r\n                                    <Form.Label>Your Name</Form.Label>\r\n                                    <InputGroup >\r\n                                        <InputGroup.Prepend>\r\n                                            <InputGroup.Text>@</InputGroup.Text>\r\n                                        </InputGroup.Prepend>\r\n                                        <Form.Control\r\n                                            type=\"text\"\r\n                                            placeholder=\"Username\"\r\n                                            value={sender}\r\n                                            onChange={(event) => setSender(event.target.value)}\r\n                                            required />\r\n                                    </InputGroup>\r\n                                </Form.Group>\r\n                                <Form.Group as={Col} sm=\"8\" style={{ marginLeft: \"auto\", marginRight: \"auto\" }} >\r\n                                    <Form.Label>Your Comment</Form.Label>\r\n                                    <Form.Control\r\n                                        as=\"textarea\"\r\n                                        type='text'\r\n                                        value={comment}\r\n                                        onChange={(event) => setComment(event.target.value)}\r\n                                        required \r\n                                        onKeyPress={(event) => {\r\n                                            if (event.key === 'Enter') {\r\n                                                sendComment(event)\r\n                                            }\r\n                                        }}\r\n                                        />\r\n                                    <Button type=\"submit\">Send comment</Button>\r\n                                </Form.Group>\r\n                            </Form.Row>\r\n                        </Form>\r\n                    </Card>\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default CommentInput\r\n","import React from \"react\"\r\nimport Toast from \"react-bootstrap/Toast\"\r\nimport \"./SingleMessage.css\"\r\n\r\nconst SingleMessage = ({ message, width }) => {\r\n    const date = new Date(message.date)\r\n    const year = date.getFullYear()\r\n    const month = date.getMonth()\r\n    const day = date.getDate()\r\n    const hour = date.getHours()\r\n    let minutes = date.getMinutes()\r\n    minutes = minutes.toString().length === 1\r\n        ? \"0\" + minutes.toString()\r\n        : minutes\r\n    return (\r\n        <Toast className=\"message\"\r\n            style={{\r\n                width: (width > 720 ? (width-480)*0.8 + \"px\" : \"90%\"),\r\n                maxWidth: (width > 720 ? (width-480)*0.8 + \"px\" : \"90%\"),\r\n            }}\r\n        >\r\n            <Toast.Header closeButton={false}>\r\n                <strong className=\"mr-auto\">{message.name}</strong>\r\n                <small>{day + \"/\" + month + \"/\" + year + \" \" + hour + \":\" + minutes}</small>\r\n            </Toast.Header>\r\n            <Toast.Body>{message.text}</Toast.Body>\r\n        </Toast>\r\n    )\r\n}\r\n\r\nexport default SingleMessage\r\n","import React from \"react\"\r\nimport SingleMessage from \"./SingleMessage/SingleMessage\"\r\nimport \"./MessageList.css\"\r\nconst MessageList = ({ messages, width }) => {\r\n    return (\r\n        <>\r\n            {messages.map((message, index) => {\r\n                return (<SingleMessage key={index} message={message} width={width} />)\r\n            })}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default MessageList\r\n","import { useState, useEffect } from 'react';\r\n\r\n// By QoP\r\n// https://stackoverflow.com/questions/36862334/get-viewport-window-height-in-reactjs\r\n\r\nfunction getWindowDimensions() {\r\n  const { innerWidth: width, innerHeight: height } = window;\r\n  return {\r\n    width,\r\n    height\r\n  };\r\n}\r\n\r\nexport default function useWindowDimensions() {\r\n  const [windowDimensions, setWindowDimensions] = useState(getWindowDimensions());\r\n\r\n  useEffect(() => {\r\n    function handleResize() {\r\n      setWindowDimensions(getWindowDimensions());\r\n    }\r\n\r\n    window.addEventListener('resize', handleResize);\r\n    return () => window.removeEventListener('resize', handleResize);\r\n  }, []);\r\n\r\n  return windowDimensions;\r\n}","import React, { useState, useEffect, useRef } from 'react'\r\nimport openSocket from \"socket.io-client\"\r\nimport { useImmer } from 'use-immer'\r\nimport Alert from \"react-bootstrap/Alert\"\r\nimport Button from \"react-bootstrap/Button\"\r\nimport Sidebar from \"./Sidebar/Sidebar\"\r\nimport CommentInput from './CommentInput/CommentInput'\r\nimport MessageList from \"./MessageList/MessageList\"\r\nimport useWindowDimensions from '../../utils/useWindowDimensions'\r\nimport \"./ConversationView.css\"\r\n\r\n\r\nconst ConversationView = (props) => {\r\n    const [conversation, setConversation] = useState({})\r\n    const [messages, setMessages] = useImmer([])\r\n    const [id] = useState(props.match.params.id)\r\n    const [error, setError] = useState(\"\")\r\n    const [socket, setSocket] = useState(null)\r\n    const { height, width } = useWindowDimensions();\r\n    const bottom = useRef(null)\r\n    const top = useRef(null)\r\n\r\n    useEffect(() => {\r\n        let openedSocket\r\n        const openConnection = () => {\r\n            openedSocket = openSocket((process.env.NODE_ENV === \"production\" ?\r\n                \"https://roninchatapp.herokuapp.com/\" :\r\n                \"http://localhost:5000\"))\r\n            openedSocket.connect()\r\n            openedSocket.emit(\"JOIN_ROOM\", id)\r\n            openedSocket.on(\"SET_CONVERSATION\", (newConversation) => {\r\n                setConversation(newConversation)\r\n                setMessages(draft => {\r\n                    newConversation.messages.map(msg => draft.push(msg))\r\n                })\r\n            })\r\n            openedSocket.on(\"UPDATE_CONVERSATION\", (newComment) => {\r\n                setMessages(draft => {\r\n                    draft.push(newComment)\r\n                })\r\n            })\r\n            openedSocket.on(\"SET_ERROR\", (error) => {\r\n                setError(error)\r\n            })\r\n            setSocket(openedSocket)\r\n        }\r\n        if (!socket) {\r\n            openConnection()\r\n        }\r\n\r\n        return function cleanup() {\r\n            openedSocket.emit(\"LEAVE_ROOM\", id)\r\n            openedSocket.disconnect()\r\n        }\r\n    }, [])\r\n\r\n    const scrollToRef = (ref) => window.scrollTo(0, ref.current.offsetTop)\r\n    const goToLast = () => scrollToRef(bottom)\r\n    const goToTop = () => scrollToRef(top)\r\n\r\n    return (\r\n        <>\r\n            {error && <Alert variant='danger' className=\"conversation-view-error\">{error}</Alert>}\r\n            <div className=\"conversation-view\">\r\n                <div className=\"sidebar-and-messages\">\r\n                    <Sidebar conversation={conversation} goToTop={goToTop} goToLast={goToLast} width={width} />\r\n                    <div\r\n                        className=\"messages\"\r\n                        style={{\r\n                            marginBottom: (width > 720 ? height / 4 + \"px\" : height / 3 + \"px\")\r\n                        }}\r\n                    >\r\n                        <div ref={top} className=\"invisible\" />\r\n                        <MessageList messages={messages} width={width} />\r\n                        <div ref={bottom} className=\"invisible\" />\r\n                    </div>\r\n                </div>\r\n                <CommentInput setError={setError} goToLast={goToLast} propsId={id} socket={socket} />\r\n            </div>\r\n        </>\r\n    )\r\n}\r\nexport default ConversationView","import React from \"react\"\r\nimport Nav from 'react-bootstrap/Nav'\r\nimport Navbar from 'react-bootstrap/Navbar'\r\nimport { Link } from 'react-router-dom'\r\nimport \"./Menu.css\"\r\n\r\nconst Menu = () => {\r\n    return (\r\n        <Navbar className=\"menu\" collapseOnSelect bg=\"light\" expand=\"lg\">\r\n            <Navbar.Brand as={Link} href='#' to='/'>Ronin ChatApp</Navbar.Brand>\r\n            <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n            <Navbar.Collapse id=\"basic-navbar-nav\">\r\n                <Nav className=\"mr-auto\">\r\n                    <Nav.Link as={Link} href='#' data-testid='restaurantList-link' to='/'>\r\n                        Conversation list\r\n                     </Nav.Link>\r\n                    <Nav.Link as={Link} href='#' to='/newconversation'>\r\n                        Create a new conversation\r\n                    </Nav.Link>\r\n                </Nav>\r\n            </Navbar.Collapse>\r\n        </Navbar>\r\n    )\r\n}\r\n\r\nexport default Menu","import React from 'react';\nimport './App.css';\nimport ConversationList from './components/ConversationList/ConversationList'\nimport NewConversationForm from './components/Menu/NewConversationForm'\nimport ConversationView from './components/ConversationView/ConversationView'\nimport Menu from './components/Menu/Menu'\nimport { Route } from 'react-router-dom'\n\nconst App = () => {\n  return (\n    <div id=\"AppWrapper\" className=\"App\">\n      <Menu/ >\n      <Route exact path=\"/\" component={ConversationList}/>\n      <Route exact path=\"/newConversation\" component={NewConversationForm}/>\n      <Route exact path=\"/conversations/:id\" component={ConversationView}/>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { BrowserRouter as Router } from 'react-router-dom'\n\nReactDOM.render(\n    <Router>\n        <App />\n    </Router>\n    , document.getElementById('root'));\n"],"sourceRoot":""}